// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"github.com/weplanx/go/rest"
	"github.com/weplanx/go/sessions"
	"github.com/weplanx/go/values"
	"server/api"
	"server/api/datasets"
	"server/api/index"
	"server/api/lark"
	"server/api/tencent"
	"server/common"
)

// Injectors from wire.go:

func NewAPI(values2 *common.Values) (*api.API, error) {
	client, err := UseMongoDB(values2)
	if err != nil {
		return nil, err
	}
	database := UseDatabase(values2, client)
	redisClient, err := UseRedis(values2)
	if err != nil {
		return nil, err
	}
	conn, err := UseNats(values2)
	if err != nil {
		return nil, err
	}
	jetStreamContext, err := UseJetStream(conn)
	if err != nil {
		return nil, err
	}
	keyValue, err := UseKeyValue(values2, jetStreamContext)
	if err != nil {
		return nil, err
	}
	cipher, err := UseCipher(values2)
	if err != nil {
		return nil, err
	}
	captcha := UseCaptcha(redisClient)
	locker := UseLocker(redisClient)
	clientClient, err := UseTransfer(jetStreamContext)
	if err != nil {
		return nil, err
	}
	inject := &common.Inject{
		V:         values2,
		Mgo:       client,
		Db:        database,
		RDb:       redisClient,
		Nats:      conn,
		JetStream: jetStreamContext,
		KeyValue:  keyValue,
		Cipher:    cipher,
		Captcha:   captcha,
		Locker:    locker,
		Transfer:  clientClient,
	}
	hertz, err := UseHertz(values2)
	if err != nil {
		return nil, err
	}
	csrf := UseCsrf(values2)
	service := UseValues(keyValue, cipher)
	controller := &values.Controller{
		Service: service,
	}
	sessionsService := UseSessions(values2, redisClient)
	sessionsController := &sessions.Controller{
		Service: sessionsService,
	}
	restService := UseRest(values2, client, database, redisClient, jetStreamContext, keyValue, cipher)
	restController := &rest.Controller{
		Service: restService,
	}
	passport := UseAPIPassport(values2)
	tencentService := &tencent.Service{
		Inject: inject,
	}
	indexService := &index.Service{
		Inject:   inject,
		Sessions: sessionsService,
		Passport: passport,
		TencentX: tencentService,
	}
	indexController := &index.Controller{
		V:      values2,
		Csrf:   csrf,
		IndexX: indexService,
	}
	tencentController := &tencent.Controller{
		TencentX: tencentService,
	}
	larkService := &lark.Service{
		Inject:   inject,
		Sessions: sessionsService,
		Locker:   locker,
		Passport: passport,
		IndexX:   indexService,
	}
	larkController := &lark.Controller{
		V:        values2,
		Passport: passport,
		LarkX:    larkService,
		IndexX:   indexService,
	}
	datasetsService := &datasets.Service{
		Inject: inject,
		Values: service,
	}
	datasetsController := &datasets.Controller{
		DatasetsX: datasetsService,
	}
	apiAPI := &api.API{
		Inject:    inject,
		Hertz:     hertz,
		Csrf:      csrf,
		Values:    controller,
		Sessions:  sessionsController,
		Rest:      restController,
		Index:     indexController,
		IndexX:    indexService,
		Tencent:   tencentController,
		TencentX:  tencentService,
		Lark:      larkController,
		LarkX:     larkService,
		Datasets:  datasetsController,
		DatasetsX: datasetsService,
	}
	return apiAPI, nil
}
